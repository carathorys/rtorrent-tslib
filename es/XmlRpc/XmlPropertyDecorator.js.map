{"version":3,"file":"XmlPropertyDecorator.js","sourceRoot":"","sources":["../../src/XmlRpc/XmlPropertyDecorator.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,CAAC;AAI1B,IAAM,sBAAsB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACxD,IAAM,mBAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAI1D,MAAM,CAAC,IAAM,oBAAoB,GAAG,UAClC,MAAyB,EACzB,WAA4B;IAE5B,IAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,sBAAsB,EAAE,MAAM,EAAE,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzF,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,mBAAmB,GAAG,UACjC,MAAqD;IAErD,OAAO,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;AAC1D,CAAC,CAAC;AAIF,MAAM,CAAC,IAAM,SAAS,GAAG,UACvB,eAAuB,EACvB,UAA2B;IAA3B,2BAAA,EAAA,kBAA2B;IAK3B,IAAM,kBAAkB,GAAG,UAAC,CAAI;QAC9B,qCAAqC;IACvC,CAAC,CAAC;IAEF,IAAM,qBAAqB,GAAG,UAAC,MAAS,EAAE,GAAoB;QAC5D,IAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,mBAAmB,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;QAC3E,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,KAAA,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;QACnC,OAAO,CAAC,cAAc,CAAC,mBAAmB,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC9D,OAAO,CAAC,cAAc,CAAC,sBAAsB,EAAE,eAAe,EAAE,MAAM,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1F,CAAC,CAAC;IACF,OAAO,UAAC,MAAS,EAAE,GAAoB;QACrC,kBAAkB,CAAC,MAAM,CAAC,EAAE,qBAAqB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACjE,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import 'reflect-metadata';\nimport { XmlRpcEntity } from './XmlRpcEntity';\nimport { WritableKeys } from '../helpers';\n\nconst XmlPropertyMetadataKey = Symbol('XmlRpcMetadata');\nconst InitializeByDefault = Symbol('InitializeByDefault');\n\nexport type XmlRpcEntityMetadata<T> = { key: WritableKeys<T>; initialize: boolean };\n\nexport const GetXmlRpcPropertyKey = <T extends XmlRpcEntity<T>>(\n  target: T | (new () => T),\n  propertyKey: WritableKeys<T>,\n): string => {\n  const data = Reflect.getMetadata(XmlPropertyMetadataKey, target, propertyKey.toString());\n  return data;\n};\n\nexport const GetFieldsToPopulate = <T extends XmlRpcEntity<T>>(\n  target: XmlRpcEntity<T> | (new () => XmlRpcEntity<T>),\n): XmlRpcEntityMetadata<T>[] => {\n  return Reflect.getMetadata(InitializeByDefault, target);\n};\n\ntype TAlias<T> = T | (new () => T);\n\nexport const XmlRpcKey = <T extends XmlRpcEntity<T>, A = TAlias<T>>(\n  xmlPropertyName: string,\n  initialize: boolean = false,\n): {\n  (target: A, key: WritableKeys<T>): void;\n  (target: A, key: WritableKeys<T>): void;\n} => {\n  const classLevelMetadata = (_: A) => {\n    // tslint:disable-next-line: no-empty\n  };\n\n  const propertyLevelMetadata = (target: A, key: WritableKeys<T>): void => {\n    const existing = Reflect.getOwnMetadata(InitializeByDefault, target) || [];\n    existing.push({ key, initialize });\n    Reflect.defineMetadata(InitializeByDefault, existing, target);\n    Reflect.defineMetadata(XmlPropertyMetadataKey, xmlPropertyName, target, key.toString());\n  };\n  return (target: A, key: WritableKeys<T>) => {\n    classLevelMetadata(target), propertyLevelMetadata(target, key);\n  };\n};\n"]}