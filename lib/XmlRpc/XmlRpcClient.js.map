{"version":3,"file":"XmlRpcClient.js","sourceRoot":"","sources":["../../src/XmlRpc/XmlRpcClient.ts"],"names":[],"mappings":";;;AACA,8BAA8B;AAE9B;IAGE,sBAAY,OAAsB;QAChC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG;YAC3B,YAAY,EAAE,0BAA0B;YACxC,cAAc,EAAE,UAAU;YAC1B,MAAM,EAAE,UAAU;YAClB,gBAAgB,EAAE,MAAM;YACxB,UAAU,EAAE,YAAY;SACzB,CAAC;QAEF,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,KAAK,IAAI,EAAE;YAC1C,gCAAgC;SACjC;IACH,CAAC;IAEY,iCAAU,GAAvB,UAAuC,MAAc;QAAE,gBAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,+BAAc;;;;gBACnE,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACtD,sBAAO,KAAK,CACV,CAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,YAAM,IAAI,CAAC,aAAa,CAAC,IAAI,SAC5E,IAAI,CAAC,aAAa,CAAC,IAAI,SACrB,IAAI,CAAC,aAAa,CAAC,IAAM,EAC7B;wBACE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM;wBACjC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO;wBACnC,SAAS,EAAE,IAAI;wBACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;qBAC7B,CACF,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,EAAE,EAAR,CAAQ,CAAC,EAAC;;;KASzB;IAUM,gCAAS,GAAhB,UAAiB,IAAY;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEM,gCAAS,GAAhB,UAAiB,IAAY,EAAE,KAAa;QAC1C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;IACH,mBAAC;AAAD,CAAC,AAzDD,IAyDC;AAzDY,oCAAY","sourcesContent":["import { ClientOptions, Cookies, HeadersProcessor } from './Types';\n// import * as url from 'url';\n\nexport class XmlRpcClient {\n  private readonly clientOptions: ClientOptions;\n\n  constructor(options: ClientOptions) {\n    this.clientOptions = options;\n    this.clientOptions.headers = {\n      'User-Agent': 'NodeJS XML-RPC Client TS',\n      'Content-Type': 'text/xml',\n      Accept: 'text/xml',\n      'Accept-Charset': 'UTF8',\n      Connection: 'Keep-Alive',\n    };\n\n    if (this.clientOptions.useCookies === true) {\n      // TODO: implemnent something...\n    }\n  }\n\n  public async methodCall<T extends any>(method: string, ...params: any): Promise<T> {\n    console.log('Calling method: ', method, this.options);\n    return fetch(\n      `${this.clientOptions.isSecure ? 'http' : 'https'}://${this.clientOptions.host}:${\n        this.clientOptions.port\n      }/${this.clientOptions.path}`,\n      {\n        method: this.clientOptions.method,\n        headers: this.clientOptions.headers,\n        keepalive: true,\n        body: JSON.stringify(params),\n      },\n    ).then((d) => d.json());\n    return new Promise((resolve, reject) => {\n      // this.client.methodCall(method, params, (error, value) => {\n      //   if (!!error) {\n      //     reject(error);\n      //   }\n      //   resolve(value);\n      // });\n    });\n  }\n\n  public headersProcessors: { processors: HeadersProcessor[] };\n\n  public Cookies: Cookies;\n\n  public isSecure: boolean;\n\n  public options: ClientOptions;\n\n  public getCookie(name: string): string {\n    return this.Cookies.get('name');\n  }\n\n  public setCookie(name: string, value: string): XmlRpcClient {\n    this.Cookies.set(name, value);\n    return this;\n  }\n}\n"]}