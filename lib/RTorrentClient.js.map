{"version":3,"file":"RTorrentClient.js","sourceRoot":"","sources":["../src/RTorrentClient.ts"],"names":[],"mappings":";;;AAAA,sEAA0F;AAE1F,mCAAoC;AACpC,mCAAuD;AAEvD;IAIE,wBAAY,aAA4B;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAY,CAAC,aAAa,CAAC,CAAC;QAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI,iBAAQ,EAAE,CAAC;IACzC,CAAC;IAEY,oCAAW,GAAxB,UACE,YAA6B;QAA7B,6BAAA,EAAA,oBAA6B;QAC7B,cAAiC;aAAjC,UAAiC,EAAjC,qBAAiC,EAAjC,IAAiC;YAAjC,6BAAiC;;;;;;4BAEd,qBAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAW,eAAe,EAAE,CAAC,EAAE,CAAC,CAAC,EAAA;;wBAA1E,UAAU,GAAG,SAA6D;6BAC5E,CAAA,YAAY,KAAK,IAAI,CAAA,EAArB,wBAAqB;wBAChB,qBAAM,IAAI,CAAC,iBAAiB,OAAtB,IAAI,0BAAmB,UAAU,GAAK,IAAI,IAAC;4BAAxD,sBAAO,SAAiD,EAAC;4BAE3D,sBAAO,UAAU,EAAC;;;;KACnB;IAEY,0CAAiB,GAA9B,UACE,UAAoB;QACpB,cAAiC;aAAjC,UAAiC,EAAjC,qBAAiC,EAAjC,IAAiC;YAAjC,6BAAiC;;;;;;;;;wBAEjC,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,KAAI,CAAC,EAAE;4BACrB,IAAI,GAAG,0CAAmB,CAAC,IAAI,iBAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,EAAL,CAAK,CAAC,CAAC;yBAC9D;wBACK,UAAU,SAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,0CAAE,GAAG,CAAC,UAAC,CAAS,IAAK,OAAG,CAAC,MAAG,EAAP,CAAO,CAAC,CAAC;wBAChE,qBAAM,CAAA,KAAA,IAAI,CAAC,MAAM,CAAA,CAAC,UAAU,mCAAC,cAAc,EAAE,UAAU,EAAE,EAAE,GAAK,UAAU,IAAC;4BAAnF,sBAAO,CAAC,SAA2E,CAAC,CAAC,GAAG,CACtF,UAAC,CAAK;4BACJ,IAAM,GAAG,GAAa,IAAI,iBAAQ,EAAE,CAAC;4BACrC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;gCACtB,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC9B,CAAC,CAAC,CAAC;4BACH,OAAO,GAAG,CAAC;wBACb,CAAC,CACF,EAAC;;;;KACH;IAEY,oCAAW,GAAxB;;;;4BACS,qBAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAA;4BAAzD,sBAAO,SAAkD,EAAC;;;;KAC3D;IAEM,qCAAY,GAAnB,UAAoB,aAAgE;QAApF,iBAQC;QAPC,IAAI,aAAa,YAAY,KAAK,EAAE;YAClC,OAAO,aAAa,CAAC,GAAG,CAAC,UAAC,YAAY;gBACpC,OAAO,2CAAoB,CAAW,KAAI,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;YAC7E,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,OAAO,CAAC,2CAAoB,CAAW,IAAI,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC,CAAC;SAC/E;IACH,CAAC;IACH,qBAAC;AAAD,CAAC,AApDD,IAoDC;AApDY,wCAAc","sourcesContent":["import { GetXmlRpcPropertyKey, GetFieldsToPopulate } from './XmlRpc/XmlPropertyDecorator';\nimport { WritableKeys } from './helpers';\nimport { Download } from './models';\nimport { XmlRpcClient, ClientOptions } from './XmlRpc';\n\nexport class RTorrentClient {\n  protected readonly downloadInstance: Download;\n  protected readonly client: XmlRpcClient;\n\n  constructor(clientOptions: ClientOptions) {\n    this.client = new XmlRpcClient(clientOptions);\n    this.downloadInstance = new Download();\n  }\n\n  public async getTorrents(\n    fetchDetails: boolean = false,\n    ...keys: WritableKeys<Download>[]\n  ): Promise<Download[] | string[]> {\n    const torrentIds = await this.client.methodCall<string[]>('download_list', ['']);\n    if (fetchDetails === true) {\n      return await this.getTorrentDetails(torrentIds, ...keys);\n    }\n    return torrentIds;\n  }\n\n  public async getTorrentDetails(\n    torrentIds: string[],\n    ...keys: WritableKeys<Download>[]\n  ): Promise<Download[]> {\n    if (keys?.length <= 0) {\n      keys = GetFieldsToPopulate(new Download()).map((x) => x.key);\n    }\n    const mappedKeys = this.PrepareQuery(keys)?.map((x: string) => `${x}=`);\n    return (await this.client.methodCall('d.multicall2', torrentIds, '', ...mappedKeys)).map(\n      (x: []) => {\n        const obj: Download = new Download();\n        keys.forEach((key, index) => {\n          obj.setValue(key, x[index]);\n        });\n        return obj;\n      },\n    );\n  }\n\n  public async getCommands(): Promise<string[]> {\n    return await this.client.methodCall('system.listMethods');\n  }\n\n  public PrepareQuery(keysToInclude: WritableKeys<Download> | WritableKeys<Download>[]): string[] {\n    if (keysToInclude instanceof Array) {\n      return keysToInclude.map((keyToInclude) => {\n        return GetXmlRpcPropertyKey<Download>(this.downloadInstance, keyToInclude);\n      });\n    } else {\n      return [GetXmlRpcPropertyKey<Download>(this.downloadInstance, keysToInclude)];\n    }\n  }\n}\n"]}