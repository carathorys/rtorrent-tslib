{"version":3,"file":"type-aliases.js","sourceRoot":"","sources":["../../src/helpers/type-aliases.ts"],"names":[],"mappings":"","sourcesContent":["export type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <\n  T\n>() => T extends Y ? 1 : 2\n  ? A\n  : B;\n\nexport type WritableKeys<T> = Exclude<\n  {\n    [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, P>;\n  }[keyof T],\n  'setValue'\n>;\nexport type ReadonlyKeys<T> = Exclude<\n  {\n    [P in keyof T]-?: IfEquals<{ [Q in P]: T[P] }, { -readonly [Q in P]: T[P] }, never, P>;\n  }[keyof T],\n  'setValue'\n>;\n"]}